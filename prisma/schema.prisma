// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt

  email String @unique
  hash  String

  firstName String?
  lastName  String?

  Boards Board[]
  Lists  List[]
  Cards  Card[]

  @@map("users")
}

model Board {
  id        Int      @id @default(autoincrement())
  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt

  title String

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  Lists List[]

  @@map("boards")
}

model List {
  id        Int      @id @default(autoincrement())
  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt

  title String

  Cards Card[]

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  boardId Int
  board   Board @relation(fields: [boardId], references: [id], onDelete: Cascade)

  @@map("lists")
}

model Card {
  id        Int      @id @default(autoincrement())
  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt

  title       String?
  description String?
  checklist   String?
  members     String?
  labels      String?
  location    String?
  comments    String?
  data        DateTime?

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  listId Int
  list   List @relation(fields: [listId], references: [id], onDelete: Cascade)

  @@map("cards")
}
